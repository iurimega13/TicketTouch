{"version":3,"sources":["../../../src/swc/options.ts"],"sourcesContent":["import commander from \"commander\";\nimport { version as swcCoreVersion } from \"@swc/core\";\nimport type { Options } from \"@swc/core\";\n\nconst DEFAULT_EXTENSIONS = [\n    \".js\",\n    \".jsx\",\n    \".es6\",\n    \".es\",\n    \".mjs\",\n    \".ts\",\n    \".tsx\",\n    \".cts\",\n    \".mts\",\n];\n\nconst pkg = require(\"../../package.json\");\n\nlet program: commander.Command;\nexport const DEFAULT_OUT_FILE_EXTENSION = \"js\";\n\nexport const initProgram = () => {\n    program = new commander.Command();\n\n    /* istanbul ignore next */\n    if (process.env.NODE_ENV === \"test\") {\n        program.exitOverride();\n    }\n\n    program.option(\n        \"-f, --filename [filename]\",\n        \"filename to use when reading from stdin - this will be used in source-maps, errors etc\"\n    );\n\n    program.option(\"--config-file [path]\", \"Path to a .swcrc file to use\");\n\n    program.option(\n        \"--env-name [name]\",\n        \"The name of the 'env' to use when loading configs and plugins. \" +\n            \"Defaults to the value of SWC_ENV, or else NODE_ENV, or else 'development'.\"\n    );\n\n    program.option(\"--no-swcrc\", \"Whether or not to look up .swcrc files\");\n\n    program.option(\n        \"--delete-dir-on-start\",\n        \"Whether or not delete output directory on start\"\n    );\n\n    program.option(\n        \"--ignore [list]\",\n        \"list of glob paths to **not** compile\",\n        collect\n    );\n\n    program.option(\n        \"--only [list]\",\n        \"list of glob paths to **only** compile\",\n        collect\n    );\n\n    program.option(\"-w, --watch\", \"Recompile files on changes\");\n\n    program.option(\"-q, --quiet\", \"Suppress compilation output\");\n\n    program.option(\n        \"-s, --source-maps [true|false|inline|both]\",\n        \"generate source maps\",\n        unstringify\n    );\n\n    program.option(\n        \"--source-map-target [string]\",\n        \"set `file` on returned source map\"\n    );\n\n    program.option(\n        \"--source-file-name [string]\",\n        \"set `sources[0]` on returned source map\"\n    );\n\n    program.option(\n        \"--source-root [filename]\",\n        \"the root from which all sources are relative\"\n    );\n\n    program.option(\n        \"-o, --out-file [out]\",\n        \"Compile all input files into a single file\"\n    );\n\n    program.option(\n        \"-d, --out-dir [out]\",\n        \"Compile an input directory of modules into an output directory\"\n    );\n\n    program.option(\n        \"--out-file-extension [string]\",\n        \"Use a specific extension for the output files [default: js]\",\n        DEFAULT_OUT_FILE_EXTENSION\n    );\n\n    program.option(\n        \"-D, --copy-files\",\n        \"When compiling a directory copy over non-compilable files\"\n    );\n\n    program.option(\n        \"--strip-leading-paths\",\n        \"Remove the leading directory (including all parent relative paths) when building the final output path\",\n        false\n    );\n\n    program.option(\n        \"--include-dotfiles\",\n        \"Include dotfiles when compiling and copying non-compilable files\"\n    );\n\n    program.option(\n        \"-C, --config <config>\",\n        \"Override a config from .swcrc file. e.g. -C module.type=amd -C module.moduleId=hello\",\n        collect\n    );\n\n    program.option(\n        \"--sync\",\n        \"Invoke swc synchronously. Useful for debugging.\",\n        collect\n    );\n\n    program.option(\n        \"--workers [number]\",\n        \"The number of workers to use for parallel processing\"\n    );\n\n    program.option(\n        \"--log-watch-compilation\",\n        \"Log a message when a watched file is successfully compiled\",\n        true\n    );\n\n    program.option(\"--extensions [list]\", \"Use specific extensions\", collect);\n\n    program.version(`\n@swc/cli: ${pkg.version}\n@swc/core: ${swcCoreVersion}\n`);\n\n    program.usage(\"[options] <files ...>\");\n    program.addHelpText(\n        \"beforeAll\",\n        `\n============================================================================================\nBeta version of @swc/cli is now available via 'swcx' command.\nThis'll be a default command for @swc/cli@1.\nPlease give it a try and report any issues at https://github.com/swc-project/swc/issues/4017\n============================================================================================\n\n`\n    );\n};\n\nfunction unstringify(val: string): any {\n    try {\n        return JSON.parse(val);\n    } catch {\n        return val;\n    }\n}\n\nfunction collect(\n    value: string,\n    previousValue?: string[]\n): string[] | undefined {\n    // If the user passed the option with no value, like \"babel file.js --presets\", do nothing.\n    /* istanbul ignore next */\n    if (typeof value !== \"string\") return previousValue;\n\n    const values = value.split(\",\");\n\n    return previousValue ? previousValue.concat(values) : values;\n}\n\nexport interface CliOptions {\n    readonly outDir: string;\n    readonly outFile: string;\n    readonly stripLeadingPaths: boolean;\n    /**\n     * Invoke swc using transformSync. It's useful for debugging.\n     */\n    readonly sync: boolean;\n    readonly workers: number | undefined;\n    readonly sourceMapTarget?: string;\n    readonly filename: string;\n    readonly filenames: string[];\n    readonly extensions: string[];\n    readonly watch: boolean;\n    readonly copyFiles: boolean;\n    readonly outFileExtension: string;\n    readonly includeDotfiles: boolean;\n    readonly deleteDirOnStart: boolean;\n    readonly quiet: boolean;\n\n    readonly only: string[];\n    readonly ignore: string[];\n}\n\nexport default function parserArgs(args: string[]) {\n    program.parse(args);\n    const opts = program.opts();\n\n    const filenames = program.args;\n    const errors = [];\n\n    if (opts.outDir && !filenames.length) {\n        errors.push(\"--out-dir requires filenames\");\n    }\n\n    if (opts.outFile && opts.outDir) {\n        errors.push(\"--out-file and --out-dir cannot be used together\");\n    }\n\n    if (opts.watch) {\n        if (!opts.outFile && !opts.outDir) {\n            errors.push(\"--watch requires --out-file or --out-dir\");\n        }\n\n        if (!filenames.length) {\n            errors.push(\"--watch requires filenames\");\n        }\n    }\n\n    if (\n        !opts.outDir &&\n        filenames.length === 0 &&\n        typeof opts.filename !== \"string\" &&\n        opts.swcrc !== false\n    ) {\n        errors.push(\n            \"stdin compilation requires either -f/--filename [filename] or --no-swcrc\"\n        );\n    }\n\n    let workers: number | undefined;\n    if (opts.workers != null) {\n        workers = parseFloat(opts.workers);\n        if (!Number.isInteger(workers) || workers < 0) {\n            errors.push(\n                \"--workers must be a positive integer (found \" +\n                    opts.workers +\n                    \")\"\n            );\n        }\n    }\n\n    if (errors.length) {\n        console.error(\"swc:\");\n        for (const error of errors) {\n            console.error(\"  \" + error);\n        }\n        process.exit(2);\n    }\n\n    const swcOptions: Options = {\n        jsc: {\n            parser: undefined,\n            transform: {},\n        },\n        sourceFileName: opts.sourceFileName,\n        sourceRoot: opts.sourceRoot,\n        configFile: opts.configFile,\n        swcrc: opts.swcrc,\n    };\n\n    if (opts.sourceMaps !== undefined) {\n        swcOptions.sourceMaps = opts.sourceMaps;\n    }\n\n    if (opts.config) {\n        for (const cfg of opts.config as string[]) {\n            const i = cfg.indexOf(\"=\");\n            let key: string;\n            let value: any;\n            if (i === -1) {\n                key = cfg;\n                value = true;\n            } else {\n                key = cfg.substring(0, i);\n                value = unstringify(cfg.substring(i + 1));\n            }\n            // https://github.com/swc-project/cli/issues/45\n            let options = swcOptions as { [key: string]: any };\n            const keyParts = key.split(\".\");\n            const lastIndex = keyParts.length - 1;\n            for (const [index, keyPart] of keyParts.entries()) {\n                if (options[keyPart] === undefined && index !== lastIndex) {\n                    options[keyPart] = {};\n                }\n                if (index === lastIndex) {\n                    options[keyPart] = value;\n                } else {\n                    options = options[keyPart];\n                }\n            }\n        }\n    }\n\n    const cliOptions: CliOptions = {\n        outDir: opts.outDir,\n        outFile: opts.outFile,\n        stripLeadingPaths: Boolean(opts.stripLeadingPaths),\n        filename: opts.filename,\n        filenames,\n        sync: !!opts.sync,\n        workers,\n        sourceMapTarget: opts.sourceMapTarget,\n        extensions: opts.extensions || DEFAULT_EXTENSIONS,\n        watch: !!opts.watch,\n        copyFiles: !!opts.copyFiles,\n        outFileExtension: opts.outFileExtension || DEFAULT_OUT_FILE_EXTENSION,\n        includeDotfiles: !!opts.includeDotfiles,\n        deleteDirOnStart: Boolean(opts.deleteDirOnStart),\n        quiet: !!opts.quiet,\n        only: opts.only || [],\n        ignore: opts.ignore || [],\n    };\n    return {\n        swcOptions,\n        cliOptions,\n    };\n}\n"],"names":["DEFAULT_OUT_FILE_EXTENSION","parserArgs","initProgram","DEFAULT_EXTENSIONS","pkg","require","program","commander","Command","process","env","NODE_ENV","exitOverride","option","collect","unstringify","version","swcCoreVersion","usage","addHelpText","val","JSON","parse","value","previousValue","values","split","concat","args","opts","filenames","errors","outDir","length","push","outFile","watch","filename","swcrc","workers","parseFloat","Number","isInteger","console","error","exit","swcOptions","jsc","parser","undefined","transform","sourceFileName","sourceRoot","configFile","sourceMaps","config","cfg","i","indexOf","key","substring","options","keyParts","lastIndex","index","keyPart","entries","cliOptions","stripLeadingPaths","Boolean","sync","sourceMapTarget","extensions","copyFiles","outFileExtension","includeDotfiles","deleteDirOnStart","quiet","only","ignore"],"mappings":"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"}