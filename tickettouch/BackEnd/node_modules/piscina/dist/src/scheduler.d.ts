import type { PiscinaWorker, PiscinaTask, RunTaskOptions } from '.';
declare function isTaskSchedulerLike(obj: {}): obj is TaskScheduler;
declare class TaskScheduler {
    size: number;
    static isTaskSchedulerLike: typeof isTaskSchedulerLike;
    static SCHEDULER_RESPONSES: {
        SPAWN: number;
        QUEUE: number;
    };
    constructor(_concurrentTasksPerWorker: number);
    getWorkers(): PiscinaWorker[];
    add(_worker: PiscinaWorker): void;
    pick(_task: PiscinaTask, _runOptions: RunTaskOptions): PiscinaWorker | null;
    onAvailable(_cb: (worker: PiscinaWorker) => void): void;
    delete(_worker: PiscinaWorker): void;
    onWorkerAvailable(_worker: PiscinaWorker): void;
    getAvailableCapacity(): number;
}
declare class DefaultTaskScheduler extends TaskScheduler {
    #private;
    constructor(maximumUsage: number);
    add(item: PiscinaWorker): void;
    delete(item: PiscinaWorker): void;
    pick(_task: PiscinaTask, opts: RunTaskOptions): PiscinaWorker | null;
    getWorkers(): PiscinaWorker[];
    get size(): number;
    set size(_value: number);
    onWorkerAvailable(item: PiscinaWorker): void;
    onAvailable(fn: (item: PiscinaWorker) => void): void;
    getAvailableCapacity(): number;
}
export { TaskScheduler, DefaultTaskScheduler, isTaskSchedulerLike };
